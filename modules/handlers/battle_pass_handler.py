from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from config.config import CRYPTO_BOT_TOKEN, PAYMENT_TOKEN

class BattlePassHandler:
    def __init__(self, bot, db):
        self.bot = bot
        self.db = db
        self.crypto_token = CRYPTO_BOT_TOKEN
        self.payment_token = PAYMENT_TOKEN

    def handle_battlepass(self, message):
        user_id = message.from_user.id
        bp_data = self.db.get_battlepass_data(user_id)
        
        markup = InlineKeyboardMarkup()
        markup.row(
            InlineKeyboardButton("üéØ –ù–∞–≥—Ä–∞–¥—ã", callback_data="battlepass:rewards"),
            InlineKeyboardButton("üíé –ü—Ä–µ–º–∏—É–º", callback_data="battlepass:premium")
        )
        
        text = (
            f"üé´ –ë–æ–µ–≤–æ–π –ø—Ä–æ–ø—É—Å–∫\n\n"
            f"üìä –£—Ä–æ–≤–µ–Ω—å: {bp_data['level']}\n"
            f"‚≠êÔ∏è –û–ø—ã—Ç: {bp_data['exp']}/100\n"
            f"üëë –ü—Ä–µ–º–∏—É–º: {'–î–∞' if bp_data['is_premium'] else '–ù–µ—Ç'}\n\n"
            f"üéÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã: {bp_data['available_rewards']}"
        )
        
        self.bot.reply_to(message, text, reply_markup=markup)

    def handle_premium_purchase(self, call):
        user_id = call.from_user.id
        
        markup = InlineKeyboardMarkup()
        markup.row(
            InlineKeyboardButton("üí≥ CryptoBot", callback_data="payment:crypto"),
            InlineKeyboardButton("üí∞ Smart Glocal", callback_data="payment:smart")
        )
        markup.row(InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="battlepass:rewards"))
        
        text = (
            "üíé –ü—Ä–µ–º–∏—É–º –±–æ–µ–≤–æ–π –ø—Ä–æ–ø—É—Å–∫\n\n"
            "üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: $5\n"
            "‚ú® –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n"
            "‚îî –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã\n"
            "‚îî x2 –æ–ø—ã—Ç–∞\n"
            "‚îî –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã\n"
            "‚îî –û—Å–æ–±—ã–π —Å—Ç–∞—Ç—É—Å\n\n"
            "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
        )
        
        self.bot.edit_message_text(
            text,
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )

    def handle_payment(self, call):
        user_id = call.from_user.id
        payment_type = call.data.split(':')[1]
        amount = 5  # USD

        if payment_type == 'crypto':
            payload = f"battlepass_premium_{user_id}"
            payment_url = f"https://t.me/CryptoBot?start=pay_{self.crypto_token}_{amount}_{payload}"
        else:  # Smart Glocal
            payment_url = f"https://pay.smart-glocal.com/payment/{self.payment_token}?amount={amount}&user_id={user_id}"

        markup = InlineKeyboardMarkup()
        markup.row(
            InlineKeyboardButton("üíé –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url),
            InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="battlepass:premium")
        )
        
        self.bot.edit_message_text(
            "üîí –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã.\n–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –ø—Ä–µ–º–∏—É–º –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )

    def handle_callback(self, call):
        action = call.data.split(':')[1]
        
        if action == 'premium':
            self.handle_premium_purchase(call)
        elif action.startswith('payment'):
            self.handle_payment(call)
        elif action == 'rewards':
            rewards = self.db.get_battlepass_rewards(call.from_user.id)
            text = "üéÅ –ù–∞–≥—Ä–∞–¥—ã –±–æ–µ–≤–æ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞:\n\n"
            for reward in rewards:
                status = "‚úÖ" if reward['claimed'] else "‚ùå"
                text += f"{status} –£—Ä–æ–≤–µ–Ω—å {reward['level']}: {reward['description']}\n"
            
            self.bot.edit_message_text(
                text,
                call.message.chat.id,
                call.message.message_id,
                reply_markup=call.message.reply_markup
            )
